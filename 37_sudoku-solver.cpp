//编写一个程序，通过填充空格来解决数独问题。 
//
// 数独的解法需 遵循如下规则： 
//
// 
// 数字 1-9 在每一行只能出现一次。 
// 数字 1-9 在每一列只能出现一次。 
// 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图） 
// 
//
// 数独部分空格内已填入了数字，空白格用 '.' 表示。 
//
// 
//
// 
// 
// 
// 示例 1： 
// 
// 
//输入：board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".
//",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".
//","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6
//"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[
//".",".",".",".","8",".",".","7","9"]]
//输出：[["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8
//"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],[
//"4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9",
//"6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4",
//"5","2","8","6","1","7","9"]]
//解释：输入的数独如上图所示，唯一有效的解决方案如下所示：
// 
// 
// 
// 
//
//
//
// 
//
// 提示： 
//
// 
// board.length == 9 
// board[i].length == 9 
// board[i][j] 是一位数字或者 '.' 
// 题目数据 保证 输入数独仅有一个解 
// 
//
// Related Topics 数组 哈希表 回溯 矩阵 👍 1714 👎 0

#include<bits/stdc++.h>
using namespace std;

//leetcode submit region begin(Prohibit modification and deletion)
class Solution
{
public:
    //题目要求直接修改表格，所以finished用于判断是否填完了表格，填完了就直接返回表格
    bool finished;
    //用三个整数数组，采用位运算分别表示每行、列、3*3方格中是否出现了1-9
    /*注意要填的数字是1-9，但是进行位运算的时候判断1-9是否填写，应该移位0-8
     * 如:row[i]=111 000 000表示7，8，9已经填写过了，判断9是否填写过应该用row & (1<<8)
     * x|=(1<<y) //将X的第Y位置1
     * x&=~(1<<y) //将X的第Y位清0
     */
    int row[9];
    int col[9];
    int box[3][3];

    void solveSudoku(vector<vector<char>> &board)
    {
        //初始化
        finished = false;
        memset(row, 0, sizeof(row));
        memset(col, 0, sizeof(col));
        memset(box, 0, sizeof(box));
        for (int i = 0; i < 9; ++i)
        {
            for (int j = 0; j < 9; ++j)
            {
                if (board[i][j] != '.')
                {
                    int num = board[i][j] - '0';
                    num-=1;
                    row[i] = row[i] | (1 << num);
                    col[j] = col[j] | (1 << num);
                    box[i / 3][j / 3] = box[i / 3][j / 3] | (1 << num);
                }
            }
        }
        backtracking(0,board);
    }


    void backtracking(int pos,vector<vector<char>> &board)
    {
        //1.完成数独表格，返回
        if (pos >= 81)
        {
            finished = true;
            return;
        }
        int i = pos / 9;
        int j = pos % 9;
        //2.如果当前格子已经填了数字，就跳过；
        if (board[i][j] != '.')
            backtracking(pos+1,board);
        //没填就分别填上1-9，递归遍历下一个格子
        else
        {
            for (int k = 0; k < 9; ++k)
            {
                if ((row[i] & (1<<k)) || (col[j] & (1<<k)) || (box[i/3][j/3] & (1<<k)))
                    continue;
                //当前格子填写为k+1，并记录其已经填过了
                board[i][j]=k+1+'0';
                row[i] = row[i] | (1 << k);
                col[j] = col[j] | (1 << k);
                box[i / 3][j / 3] = box[i / 3][j / 3] | (1 << k);
                backtracking(pos+1,board);
                //3.这种填法没有完成就回溯
                if(!finished)
                {
                    board[i][j]='.';
                    row[i] = row[i] & (~(1<<k));
                    col[j] = col[j] & (~(1<<k));
                    box[i / 3][j / 3] = box[i / 3][j / 3] & (~(1<<k));
                }
            }
        }

    }
};
//leetcode submit region end(Prohibit modification and deletion)
